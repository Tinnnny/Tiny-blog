(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{379:function(s,n,t){"use strict";t.r(n);var a=t(25),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),t("p",[s._v('在Java中，String是一个引用类型，它本身也是一个class。但是，Java编译器对String有特殊处理，即可以直接用"..."来表示一个字符串：')]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("实际上字符串在String内部是通过一个char[]数组表示的，因此，按下面的写法也是可以的：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'H'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'e'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'l'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'l'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'o'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'!'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v('因为String太常用了，所以Java提供了"..."这种字符串字面量表示方法。')]),s._v(" "),t("p",[s._v("Java字符串的一个重要特点就是字符串不可变。这种不可变性是通过内部的private final char[]字段，以及没有任何修改char[]的方法实现的。")]),s._v(" "),t("p",[s._v("我们来看一个例子：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// String\n\npublic class Main {\n    public static void main(String[] args) {\n        String s = "Hello";\n        System.out.println(s);\n        s = s.toUpperCase();\n        System.out.println(s);\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("Run\n根据上面代码的输出，试解释字符串内容是否改变。")]),s._v(" "),t("p",[s._v("字符串比较\n当我们想要比较两个字符串是否相同时，要特别注意，我们实际上是想比较字符串的内容是否相同。必须使用equals()方法而不能用==。")]),s._v(" "),t("p",[s._v("我们看下面的例子：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Main")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("从表面上看，两个字符串用==和equals()比较都为true，但实际上那只是Java编译器在编译期，会自动把所有相同的字符串当作一个对象放入常量池，自然s1和s2的引用就是相同的。")]),s._v(" "),t("p",[s._v("所以，这种==比较返回true纯属巧合。换一种写法，==比较就会失败：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Main")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HELLO"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toLowerCase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("结论：两个字符串比较，必须总是使用equals()方法。")]),s._v(" "),t("p",[s._v("要忽略大小写比较，使用equalsIgnoreCase()方法。")]),s._v(" "),t("p",[s._v("String类还提供了多种方法来搜索子串、提取子串。常用的方法有：")]),s._v(" "),t("p",[s._v('// 是否包含子串:\n"Hello".contains("ll"); // true\n注意到contains()方法的参数是CharSequence而不是String，因为CharSequence是String的父类。')]),s._v(" "),t("p",[s._v("搜索子串的更多的例子：")]),s._v(" "),t("p",[s._v('"Hello".indexOf("l"); // 2\n"Hello".lastIndexOf("l"); // 3\n"Hello".startsWith("He"); // true\n"Hello".endsWith("lo"); // true\n提取子串的例子：')]),s._v(" "),t("p",[s._v('"Hello".substring(2); // "llo"\n"Hello".substring(2, 4); "ll"\n注意索引号是从0开始的。')]),s._v(" "),t("p",[s._v("去除首尾空白字符\n使用trim()方法可以移除字符串首尾空白字符。空白字符包括空格，\\t，\\r，\\n：")]),s._v(" "),t("p",[s._v('"  \\tHello\\r\\n ".trim(); // "Hello"\n注意：trim()并没有改变字符串的内容，而是返回了一个新字符串。')]),s._v(" "),t("p",[s._v("另一个strip()方法也可以移除字符串首尾空白字符。它和trim()不同的是，类似中文的空格字符\\u3000也会被移除：")]),s._v(" "),t("p",[s._v('"\\u3000Hello\\u3000".strip(); // "Hello"\n" Hello ".stripLeading(); // "Hello "\n" Hello ".stripTrailing(); // " Hello"\nString还提供了isEmpty()和isBlank()来判断字符串是否为空和空白字符串：')]),s._v(" "),t("p",[s._v('"".isEmpty(); // true，因为字符串长度为0\n"  ".isEmpty(); // false，因为字符串长度不为0\n"  \\n".isBlank(); // true，因为只包含空白字符\n" Hello ".isBlank(); // false，因为包含非空白字符\n替换子串\n要在字符串中替换子串，有两种方法。一种是根据字符或字符串替换：')]),s._v(" "),t("p",[s._v("String s = \"hello\";\ns.replace('l', 'w'); // \"hewwo\"，所有字符'l'被替换为'w'\ns.replace(\"ll\", \""),t("s",[s._v('"); // "he')]),s._v('o"，所有子串"ll"被替换为"~~"\n另一种是通过正则表达式替换：')]),s._v(" "),t("p",[s._v('String s = "A,,B;C ,D";\ns.replaceAll("[\\,\\;\\s]+", ","); // "A,B,C,D"\n上面的代码通过正则表达式，把匹配的子串统一替换为","。关于正则表达式的用法我们会在后面详细讲解。')]),s._v(" "),t("p",[s._v("分割字符串\n要分割字符串，使用split()方法，并且传入的也是正则表达式：")]),s._v(" "),t("p",[s._v('String s = "A,B,C,D";\nString[] ss = s.split("\\,"); // {"A", "B", "C", "D"}\n拼接字符串\n拼接字符串使用静态方法join()，它用指定的字符串连接字符串数组：')]),s._v(" "),t("p",[s._v('String[] arr = {"A", "B", "C"};\nString s = String.join("***", arr); // "A***B***C"\n格式化字符串\n字符串提供了formatted()方法和format()静态方法，可以传入其他参数，替换占位符，然后生成新的字符串：')]),s._v(" "),t("p",[s._v("// String")]),s._v(" "),t("p",[s._v('public class Main {\npublic static void main(String[] args) {\nString s = "Hi %s, your score is %d!";\nSystem.out.println(s.formatted("Alice", 80));\nSystem.out.println(String.format("Hi %s, your score is %.2f!", "Bob", 59.5));\n}\n}')]),s._v(" "),t("p",[s._v("Run\n有几个占位符，后面就传入几个参数。参数类型要和占位符一致。我们经常用这个方法来格式化信息。常用的占位符有：")]),s._v(" "),t("p",[s._v("%s：显示字符串；\n%d：显示整数；\n%x：显示十六进制整数；\n%f：显示浮点数。\n占位符还可以带格式，例如%.2f表示显示两位小数。如果你不确定用啥占位符，那就始终用%s，因为%s可以显示任何数据类型。要查看完整的格式化语法，请参考JDK文档。")]),s._v(" "),t("p",[s._v("类型转换\n要把任意基本类型或引用类型转换为字符串，可以使用静态方法valueOf()。这是一个重载方法，编译器会根据参数自动选择合适的方法：")]),s._v(" "),t("p",[s._v('String.valueOf(123); // "123"\nString.valueOf(45.67); // "45.67"\nString.valueOf(true); // "true"\nString.valueOf(new Object()); // 类似java.lang.Object@636be97c\n要把字符串转换为其他类型，就需要根据情况。例如，把字符串转换为int类型：')]),s._v(" "),t("p",[s._v('int n1 = Integer.parseInt("123"); // 123\nint n2 = Integer.parseInt("ff", 16); // 按十六进制转换，255\n把字符串转换为boolean类型：')]),s._v(" "),t("p",[s._v('boolean b1 = Boolean.parseBoolean("true"); // true\nboolean b2 = Boolean.parseBoolean("FALSE"); // false\n要特别注意，Integer有个getInteger(String)方法，它不是将字符串转换为int，而是把该字符串对应的系统变量转换为Integer：')]),s._v(" "),t("p",[s._v('Integer.getInteger("java.version"); // 版本号，11\n转换为char[]\nString和char[]类型可以互相转换，方法是：')]),s._v(" "),t("p",[s._v('char[] cs = "Hello".toCharArray(); // String -> char[]\nString s = new String(cs); // char[] -> String\n如果修改了char[]数组，String并不会改变：')]),s._v(" "),t("p",[s._v("// String <-> char[]")]),s._v(" "),t("p",[s._v("public class Main {\npublic static void main(String[] args) {\nchar[] cs = \"Hello\".toCharArray();\nString s = new String(cs);\nSystem.out.println(s);\ncs[0] = 'X';\nSystem.out.println(s);\n}\n}")]),s._v(" "),t("p",[s._v("Run\n这是因为通过new String(char[])创建新的String实例时，它并不会直接引用传入的char[]数组，而是会复制一份，所以，修改外部的char[]数组不会影响String实例内部的char[]数组，因为这是两个不同的数组。")]),s._v(" "),t("p",[s._v("从String的不变性设计可以看出，如果传入的对象有可能改变，我们需要复制而不是直接引用。")]),s._v(" "),t("p",[s._v("例如，下面的代码设计了一个Score类保存一组学生的成绩：")]),s._v(" "),t("p",[s._v("// int[]\nimport java.util.Arrays;")]),s._v(" "),t("p",[s._v("public class Main {\npublic static void main(String[] args) {\nint[] scores = new int[] { 88, 77, 51, 66 };\nScore s = new Score(scores);\ns.printScores();\nscores[2] = 99;\ns.printScores();\n}\n}")]),s._v(" "),t("p",[s._v("class Score {\nprivate int[] scores;\npublic Score(int[] scores) {\nthis.scores = scores;\n}")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("public void printScores() {\n    System.out.println(Arrays.toString(scores));\n}\n")])])]),t("p",[s._v("}")]),s._v(" "),t("p",[s._v("Run\n观察两次输出，由于Score内部直接引用了外部传入的int[]数组，这会造成外部代码对int[]数组的修改，影响到Score类的字段。如果外部代码不可信，这就会造成安全隐患。")]),s._v(" "),t("p",[s._v("请修复Score的构造方法，使得外部代码对数组的修改不影响Score实例的int[]字段。")]),s._v(" "),t("p",[s._v("字符编码\n在早期的计算机系统中，为了给字符编码，美国国家标准学会（American National Standard Institute：ANSI）制定了一套英文字母、数字和常用符号的编码，它占用一个字节，编码范围从0到127，最高位始终为0，称为ASCII编码。例如，字符'A'的编码是0x41，字符'1'的编码是0x31。")]),s._v(" "),t("p",[s._v("如果要把汉字也纳入计算机编码，很显然一个字节是不够的。GB2312标准使用两个字节表示一个汉字，其中第一个字节的最高位始终为1，以便和ASCII编码区分开。例如，汉字'中'的GB2312编码是0xd6d0。")]),s._v(" "),t("p",[s._v("类似的，日文有Shift_JIS编码，韩文有EUC-KR编码，这些编码因为标准不统一，同时使用，就会产生冲突。")]),s._v(" "),t("p",[s._v("为了统一全球所有语言的编码，全球统一码联盟发布了Unicode编码，它把世界上主要语言都纳入同一个编码，这样，中文、日文、韩文和其他语言就不会冲突。")]),s._v(" "),t("p",[s._v("Unicode编码需要两个或者更多字节表示，我们可以比较中英文字符在ASCII、GB2312和Unicode的编码：")]),s._v(" "),t("p",[s._v("英文字符'A'的ASCII编码和Unicode编码：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("     ┌────┐\n")])])]),t("p",[s._v("ASCII:   │ 41 │\n└────┘\n┌────┬────┐\nUnicode: │ 00 │ 41 │\n└────┴────┘\n英文字符的Unicode编码就是简单地在前面添加一个00字节。")]),s._v(" "),t("p",[s._v("中文字符'中'的GB2312编码和Unicode编码：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("     ┌────┬────┐\n")])])]),t("p",[s._v("GB2312:  │ d6 │ d0 │\n└────┴────┘\n┌────┬────┐\nUnicode: │ 4e │ 2d │\n└────┴────┘\n那我们经常使用的UTF-8又是什么编码呢？因为英文字符的Unicode编码高字节总是00，包含大量英文的文本会浪费空间，所以，出现了UTF-8编码，它是一种变长编码，用来把固定长度的Unicode编码变成1～4字节的变长编码。通过UTF-8编码，英文字符'A'的UTF-8编码变为0x41，正好和ASCII码一致，而中文'中'的UTF-8编码为3字节0xe4b8ad。")]),s._v(" "),t("p",[s._v("UTF-8编码的另一个好处是容错能力强。如果传输过程中某些字符出错，不会影响后续字符，因为UTF-8编码依靠高字节位来确定一个字符究竟是几个字节，它经常用来作为传输编码。")]),s._v(" "),t("p",[s._v("在Java中，char类型实际上就是两个字节的Unicode编码。如果我们要手动把字符串转换成其他编码，可以这样做：")]),s._v(" "),t("p",[s._v('byte[] b1 = "Hello".getBytes(); // 按系统默认编码转换，不推荐\nbyte[] b2 = "Hello".getBytes("UTF-8"); // 按UTF-8编码转换\nbyte[] b2 = "Hello".getBytes("GBK"); // 按GBK编码转换\nbyte[] b3 = "Hello".getBytes(StandardCharsets.UTF_8); // 按UTF-8编码转换\n注意：转换编码后，就不再是char类型，而是byte类型表示的数组。')]),s._v(" "),t("p",[s._v("如果要把已知编码的byte[]转换为String，可以这样做：")]),s._v(" "),t("p",[s._v('byte[] b = ...\nString s1 = new String(b, "GBK"); // 按GBK转换\nString s2 = new String(b, StandardCharsets.UTF_8); // 按UTF-8转换\n始终牢记：Java的String和char在内存中总是以Unicode编码表示。')]),s._v(" "),t("p",[s._v("延伸阅读\n对于不同版本的JDK，String类在内存中有不同的优化方式。具体来说，早期JDK版本的String总是以char[]存储，它的定义如下：")]),s._v(" "),t("p",[s._v("public final class String {\nprivate final char[] value;\nprivate final int offset;\nprivate final int count;\n}\n而较新的JDK版本的String则以byte[]存储：如果String仅包含ASCII字符，则每个byte存储一个字符，否则，每两个byte存储一个字符，这样做的目的是为了节省内存，因为大量的长度较短的String通常仅包含ASCII字符：")]),s._v(" "),t("p",[s._v("public final class String {\nprivate final byte[] value;\nprivate final byte coder; // 0 = LATIN1, 1 = UTF16\n对于使用者来说，String内部的优化不影响任何已有代码，因为它的public方法签名是不变的。")])])}),[],!1,null,null,null);n.default=e.exports}}]);