(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{385:function(n,i,t){"use strict";t.r(i);var e=t(25),r=Object(e.a)({},(function(){var n=this,i=n.$createElement,t=n._self._c||i;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"stringjoiner"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stringjoiner"}},[n._v("#")]),n._v(" StringJoiner")]),n._v(" "),t("p",[n._v("要高效拼接字符串，应该使用StringBuilder。")]),n._v(" "),t("p",[n._v("很多时候，我们拼接的字符串像这样：")]),n._v(" "),t("p",[n._v("// Hello Bob, Alice, Grace!")]),n._v(" "),t("p",[n._v('public class Main {\npublic static void main(String[] args) {\nString[] names = {"Bob", "Alice", "Grace"};\nvar sb = new StringBuilder();\nsb.append("Hello ");\nfor (String name : names) {\nsb.append(name).append(", ");\n}\n// 注意去掉最后的", ":\nsb.delete(sb.length() - 2, sb.length());\nsb.append("!");\nSystem.out.println(sb.toString());\n}\n}')]),n._v(" "),t("p",[n._v("Run\n类似用分隔符拼接数组的需求很常见，所以Java标准库还提供了一个StringJoiner来干这个事：")]),n._v(" "),t("p",[n._v("import java.util.StringJoiner;")]),n._v(" "),t("p",[n._v('public class Main {\npublic static void main(String[] args) {\nString[] names = {"Bob", "Alice", "Grace"};\nvar sj = new StringJoiner(", ");\nfor (String name : names) {\nsj.add(name);\n}\nSystem.out.println(sj.toString());\n}\n}')]),n._v(" "),t("p",[n._v('Run\n慢着！用StringJoiner的结果少了前面的"Hello "和结尾的"!"！遇到这种情况，需要给StringJoiner指定“开头”和“结尾”：')]),n._v(" "),t("p",[n._v("import java.util.StringJoiner;")]),n._v(" "),t("p",[n._v('public class Main {\npublic static void main(String[] args) {\nString[] names = {"Bob", "Alice", "Grace"};\nvar sj = new StringJoiner(", ", "Hello ", "!");\nfor (String name : names) {\nsj.add(name);\n}\nSystem.out.println(sj.toString());\n}\n}')]),n._v(" "),t("p",[n._v("Run\n那么StringJoiner内部是如何拼接字符串的呢？如果查看源码，可以发现，StringJoiner内部实际上就是使用了StringBuilder，所以拼接效率和StringBuilder几乎是一模一样的。")]),n._v(" "),t("p",[n._v("String.join()\nString还提供了一个静态方法join()，这个方法在内部使用了StringJoiner来拼接字符串，在不需要指定“开头”和“结尾”的时候，用String.join()更方便：")]),n._v(" "),t("p",[n._v('String[] names = {"Bob", "Alice", "Grace"};\nvar s = String.join(", ", names);\n练习\n请使用StringJoiner构造一个SELECT语句：')]),n._v(" "),t("p",[n._v("import java.util.StringJoiner;")]),n._v(" "),t("p",[n._v('public class Main {\npublic static void main(String[] args) {\nString[] fields = { "name", "position", "salary" };\nString table = "employee";\nString select = buildSelectSql(table, fields);\nSystem.out.println(select);\nSystem.out.println("SELECT name, position, salary FROM employee".equals(select) ? "测试成功" : "测试失败");\n}')]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('static String buildSelectSql(String table, String[] fields) {\n    // TODO:\n    return "";\n}\n')])])]),t("p",[n._v("}")])])}),[],!1,null,null,null);i.default=r.exports}}]);