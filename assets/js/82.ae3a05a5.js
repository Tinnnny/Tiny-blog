(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{436:function(t,r,e){"use strict";e.r(r);var o=e(25),v=Object(o.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"docker-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-简介"}},[t._v("#")]),t._v(" Docker 简介")]),t._v(" "),e("h2",{attrs:{id:"什么是-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-docker"}},[t._v("#")]),t._v(" 什么是 Docker")]),t._v(" "),e("blockquote",[e("p",[t._v("官网地址："),e("code",[t._v("https://www.docker.com/")])])]),t._v(" "),e("p",[t._v("Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源[docker-soft]，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟（OCI）。")]),t._v(" "),e("p",[t._v("Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目已经超过 4 万 6 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，dotCloud 公司决定改名为 Docker。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。")]),t._v(" "),e("p",[t._v("Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为 容器 。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。")]),t._v(" "),e("p",[t._v("Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。")]),t._v(" "),e("p",[t._v("下面的图片比较了 Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"http://ww1.sinaimg.cn/large/007Rnr4nly1g8jxv6jos6j30ps0n4q43.jpg"}})]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"http://ww1.sinaimg.cn/large/007Rnr4nly1g8jxvf9iuyj30ps0n6abb.jpg"}})]),t._v(" "),e("h2",{attrs:{id:"持续交付和部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持续交付和部署"}},[t._v("#")]),t._v(" 持续交付和部署")]),t._v(" "),e("p",[t._v("对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。")]),t._v(" "),e("p",[t._v("使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合 持续集成(Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment) 系统进行自动部署。")]),t._v(" "),e("p",[t._v("而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。")]),t._v(" "),e("h2",{attrs:{id:"对比传统虚拟机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对比传统虚拟机"}},[t._v("#")]),t._v(" 对比传统虚拟机")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("特性")]),t._v(" "),e("th",[t._v("容器")]),t._v(" "),e("th",[t._v("虚拟机")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("启动")]),t._v(" "),e("td",[t._v("秒级")]),t._v(" "),e("td",[t._v("分钟级")])]),t._v(" "),e("tr",[e("td",[t._v("硬盘使用")]),t._v(" "),e("td",[t._v("一般为 MB")]),t._v(" "),e("td",[t._v("一般为 GB")])]),t._v(" "),e("tr",[e("td",[t._v("性能")]),t._v(" "),e("td",[t._v("接近原生")]),t._v(" "),e("td",[t._v("弱于")])]),t._v(" "),e("tr",[e("td",[t._v("系统支持量")]),t._v(" "),e("td",[t._v("单机支持上千个容器")]),t._v(" "),e("td",[t._v("一般几十个")])])])])])}),[],!1,null,null,null);r.default=v.exports}}]);