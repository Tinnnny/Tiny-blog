(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{440:function(e,a,s){"use strict";s.r(a);var t=s(25),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"docker-操作容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-操作容器"}},[e._v("#")]),e._v(" Docker 操作容器")]),e._v(" "),s("h2",{attrs:{id:"启动容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动容器"}},[e._v("#")]),e._v(" 启动容器")]),e._v(" "),s("p",[e._v("所需要的命令主要为"),s("code",[e._v("docker run")]),e._v("。例如，下面的命令输出一个"),s("code",[e._v("“Hello World”")]),e._v("，之后终止容器。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker run ubuntu:16.04 /bin/echo 'Hello world'\nHello world\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("当利用 "),s("code",[e._v("docker run")]),e._v(" 来创建容器时，Docker 在后台运行的标准操作包括：")]),e._v(" "),s("ul",[s("li",[e._v("检查本地是否存在指定的镜像，不存在就从公有仓库下载")]),e._v(" "),s("li",[e._v("利用镜像创建并启动一个容器")]),e._v(" "),s("li",[e._v("分配一个文件系统，并在只读的镜像层外面挂载一层可读写层")]),e._v(" "),s("li",[e._v("从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去")]),e._v(" "),s("li",[e._v("从地址池配置一个 ip 地址给容器")]),e._v(" "),s("li",[e._v("执行用户指定的应用程序")]),e._v(" "),s("li",[e._v("执行完毕后容器被终止")])]),e._v(" "),s("h2",{attrs:{id:"终止容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#终止容器"}},[e._v("#")]),e._v(" 终止容器")]),e._v(" "),s("p",[e._v("可以使用 "),s("code",[e._v("docker container stop")]),e._v(" 来终止一个运行中的容器。此外，当 Docker 容器中指定的应用终结时，容器也自动终止。")]),e._v(" "),s("p",[e._v("例如对于只启动了一个终端的容器，用户通过 "),s("code",[e._v("exit")]),e._v(" 命令或 "),s("code",[e._v("ctrl + d")]),e._v(" 来退出终端时，所创建的容器立刻终止。终止状态的容器可以用 "),s("code",[e._v("docker container ls -a")]),e._v(" 命令看到。例如")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('docker container ls -a\n# 输出如下\nCONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES\nba267838cc1b        ubuntu:14.04             "/bin/bash"            30 minutes ago      Exited (0) About a minute ago                       trusting_newton\n98e5efa7d997        training/webapp:latest   "python app.py"        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h2",{attrs:{id:"启动已终止容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动已终止容器"}},[e._v("#")]),e._v(" 启动已终止容器")]),e._v(" "),s("p",[e._v("处于终止状态的容器，可以通过"),s("code",[e._v("docker container start")]),e._v(" 命令来重新启动。此外，"),s("code",[e._v("docker container restart")]),e._v(" 命令会将一个运行态的容器终止，然后再重新启动它。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker container start [container ID or NAMES]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"守护态运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#守护态运行"}},[e._v("#")]),e._v(" 守护态运行")]),e._v(" "),s("p",[e._v("更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 "),s("code",[e._v("-d")]),e._v("参数来实现。")]),e._v(" "),s("p",[e._v("如果不使用 "),s("code",[e._v("-d")]),e._v("参数运行容器。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('docker run ubuntu:16.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"\n# 输出如下\nhello world\nhello world\nhello world\nhello world\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("如果使用了 "),s("code",[e._v("-d")]),e._v("参数运行容器,容器会把输出的结果 (STDOUT) 打印到宿主机上面。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('docker run -d ubuntu:17.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"\n# 输出如下\n77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 "),s("code",[e._v("docker logs")]),e._v(" 查看)。")]),e._v(" "),s("blockquote",[s("p",[e._v("注意：容器是否会长久运行，是和"),s("code",[e._v("docker run")]),e._v("指定的命令有关，和"),s("code",[e._v("-d")]),e._v("参数无关。")])]),e._v(" "),s("h2",{attrs:{id:"容器日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器日志"}},[e._v("#")]),e._v(" 容器日志")]),e._v(" "),s("p",[e._v("要获取容器的输出信息，可以通过 docker container logs 命令。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker container logs [container ID or NAMES]\n# 输出如下\nhello world\nhello world\nhello world\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h2",{attrs:{id:"进入容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进入容器"}},[e._v("#")]),e._v(" 进入容器")]),e._v(" "),s("p",[e._v("在使用 "),s("code",[e._v("-d")]),e._v(" 参数时，容器启动后会进入后台。某些时候需要进入容器进行操作，"),s("code",[e._v("docker exec")]),e._v(" 命令能让我们以交互的方式进入容器。")]),e._v(" "),s("p",[e._v("docker exec 后边可以跟多个参数，这里主要说明"),s("code",[e._v("-i`` -t")]),e._v("参数。只用 "),s("code",[e._v("-i")]),e._v(" 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。当 "),s("code",[e._v("-i`` -t")]),e._v(" 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker exec -it 69d1 bash\nroot@69d137adef7a:/#\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("如果从这个"),s("code",[e._v("stdin")]),e._v(" 中 "),s("code",[e._v("exit")]),e._v(",不会导致容器的停止。更多参数说明请使用 "),s("code",[e._v("docker exec --help")]),e._v(" 查看。")]),e._v(" "),s("h2",{attrs:{id:"删除容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除容器"}},[e._v("#")]),e._v(" 删除容器")]),e._v(" "),s("p",[e._v("可以使用 "),s("code",[e._v("docker container rm")]),e._v("来删除一个处于终止状态的容器。例如")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker container rm trusting_newton\ntrusting_newton\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("如果要删除一个运行中的容器，可以添加 "),s("code",[e._v("-f")]),e._v(" 参数。Docker 会发送 "),s("code",[e._v("SIGKILL")]),e._v(" 信号给容器。")]),e._v(" "),s("h2",{attrs:{id:"清理所有处于终止状态的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清理所有处于终止状态的容器"}},[e._v("#")]),e._v(" 清理所有处于终止状态的容器")]),e._v(" "),s("p",[e._v("用 "),s("code",[e._v("docker container ls -a")]),e._v(" 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker container prune\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);