(window.webpackJsonp=window.webpackJsonp||[]).push([[303],{655:function(t,r,a){"use strict";a.r(r);var s=a(25),v=Object(s.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("Spring Boot 可以称之为 新一代 JavaEE 开发标准；随着动态语言的流行 (Ruby、Groovy、Scala、Node.js)，Java的开发显得格外的笨重：繁多的配置、低下的开发效率、复杂的部署流程以及第三方技术集成难度大。")]),t._v(" "),a("p",[t._v("在上述环境下，Spring Boot应运而生。它使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速的运行起来。使用Spring Boot很容易创建一个独立运行（运行Jar，内嵌Servlet容器）准生产级别的基于Spring框架的项目，使用Spring Boot你可以不用或者只需很少的Spring配置。")]),t._v(" "),a("h2",{attrs:{id:"spring-简史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-简史"}},[t._v("#")]),t._v(" Spring 简史")]),t._v(" "),a("h3",{attrs:{id:"spring-1-x-时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-1-x-时代"}},[t._v("#")]),t._v(" Spring 1.x 时代")]),t._v(" "),a("p",[t._v("在Spring1.x时代，都是通过xml文件配置bean，随着项目的不断扩大，需要将xml配置分放到不同的配置文件中，需要频繁的在java类和xml配置文件中切换。")]),t._v(" "),a("h3",{attrs:{id:"spring-2-x-时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-2-x-时代"}},[t._v("#")]),t._v(" Spring 2.x 时代")]),t._v(" "),a("p",[t._v("随着 JDK 1.5 带来的注解支持，Spring2.x 可以使用注解对 Bean 进行申明和注入，大大的减少了 xml 配置文件，同时也大大简化了项目的开发。")]),t._v(" "),a("p",[t._v("那么，问题来了，究竟是应该使用 xml 还是注解呢？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("最佳实践：")]),t._v(" "),a("ul",[a("li",[t._v("应用的基本配置用 xml，比如：数据源、资源文件等")]),t._v(" "),a("li",[t._v("业务开发用注解，比如:Service中注入bean等。")])])]),t._v(" "),a("h3",{attrs:{id:"spring-3-x-时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-3-x-时代"}},[t._v("#")]),t._v(" Spring 3.x 时代")]),t._v(" "),a("p",[t._v("从 Spring3.x 开始提供了 Java 配置方式，使用 Java 配置方式可以更好的理解你配置的 Bean，现在我们就处于这个时代，并且 Spring4.x 和 Spring boot 都推荐使用 java 配置的方式。")]),t._v(" "),a("h3",{attrs:{id:"spring-5-x-时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-5-x-时代"}},[t._v("#")]),t._v(" Spring 5.x 时代")]),t._v(" "),a("p",[t._v("Spring5.x 是 Java 界首个支持响应式的 Web 框架，是 Spring 的一个重要版本，距离 Spring4.x 差不多四年。在此期间，大多数增强都是在 Spring Boot 项目中完成的，其最大的亮点就是提供了完整的端到端响应式编程的支持（新增 Spring WebFlux 模块）。")]),t._v(" "),a("p",[t._v("Spring WebFlux 同时支持使用旧的 Spring MVC 注解声明 Reactive Controller。和传统的 MVC Controller 不同，Reactive Controller 操作的是"),a("strong",[t._v("非阻塞")]),t._v("的 ServerHttpRequest 和 ServerHttpResponse，而不再是 Spring MVC 里的 HttpServletRequest 和 HttpServletResponse。")]),t._v(" "),a("p",[t._v("至此也代表着 Java 正式迎来了响应式异步编程的时代。")]),t._v(" "),a("h2",{attrs:{id:"spring-boot-优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-优缺点"}},[t._v("#")]),t._v(" Spring Boot 优缺点")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("优点")]),t._v(" "),a("ul",[a("li",[t._v("快速构建项目")]),t._v(" "),a("li",[t._v("对主流开发框架的无配置集成")]),t._v(" "),a("li",[t._v("项目可独立运行，无需外部依赖 Servlet 容器")]),t._v(" "),a("li",[t._v("提供运行时的应用监控")]),t._v(" "),a("li",[t._v("极大地提高了开发、部署效率")]),t._v(" "),a("li",[t._v("与云计算的天然集成")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("缺点")]),t._v(" "),a("ul",[a("li",[t._v("版本迭代速度很快，一些模块改动很大")]),t._v(" "),a("li",[t._v("由于不用自己做配置，报错时很难定位")])])])])}),[],!1,null,null,null);r.default=v.exports}}]);