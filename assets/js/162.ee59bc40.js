(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{519:function(t,a,s){"use strict";s.r(a);var e=s(25),l=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("接口，是Java语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，那么接口的内部主要就是封装了方法，包含抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8），私有方法\n（JDK 9）。")]),t._v(" "),s("p",[t._v("接口的定义，它与定义类方式相似，但是使用"),s("code",[t._v("interface")]),t._v("关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("引用数据类型：")]),t._v(" "),s("p",[t._v("数组，类，接口")])]),t._v(" "),s("p",[t._v("接口的使用，它不能创建对象，但是可以被实现（implements ，类似于被继承）。一个实现接口的类（可以看做是接口的子类），需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象\n类。类与类之间是单继承的，直接父类只有一个。类与接口之间是多实现的，一个类可以实现多个接口。接口与接口之间是多继承的。")]),t._v(" "),s("h2",{attrs:{id:"新增内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新增内容"}},[t._v("#")]),t._v(" 新增内容")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("在Java 9+版本中，接口的内容有：")]),t._v(" "),s("ol",[s("li",[t._v("成员变量其实是常量，格式：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[public] [static] [final] 数据类型 常量名称=数据值。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("注意：\n常量必须进行赋值，而且一旦赋值不能改变。\n常量名称完全大写，用下划线进行分隔。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("接口中最重要的就是抽象方法，格式：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[public] [abstract] 返回值类型 方法名称(参数列表);\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("注意：实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("从Java 8开始，接口里允许定义默认方法，格式：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[public] default 返回值类型 方法名称(参数列表) { 方法体 }\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("注意：默认方法也可以被覆盖重写")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("从Java 8开始，接口里允许定义静态方法，格式：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[public] static 返回值类型 方法名称(参数列表) { 方法体 }\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("注意：应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("从Java 9开始，接口里允许定义私有很乏，格式：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("普通私有方法：private 返回值类型 方法名称(参数列表) { 方法体 }\n静态私有方法：private static 返回值类型 方法名称(参数列表) { 方法体 }\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("注意：private的方法只有接口自己才能调用，不能被实现类或别人使用。")])]),t._v(" "),s("h2",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("使用接口时应该注意：")]),t._v(" "),s("ol",[s("li",[t._v("接口是没有静态代码块或者构造方法的。")]),t._v(" "),s("li",[t._v("一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。")]),t._v(" "),s("li",[t._v("如果实现类所实现的多个接口中，存在重复的抽象方法，那么只需要覆盖重写一次即可。")]),t._v(" "),s("li",[t._v("如果实现类没有覆盖重写接口中的所有抽象方法，那么实现类就必须是一个抽象类。")]),t._v(" "),s("li",[t._v("如果实现类所实现的多个接口当中，存在默认的重复方法，那么实现类一定要对冲突的默认方法进行覆盖重写。")]),t._v(" "),s("li",[t._v("一个类如果直接父类当中的方法，和接口中的默认方法产生了冲突，优先使用父类当中的方法。")])])]),t._v(" "),s("h2",{attrs:{id:"关于多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于多态"}},[t._v("#")]),t._v(" 关于多态")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"http://ww1.sinaimg.cn/large/007Rnr4nly1g8hldzrd00j30qz0e5ajq.jpg"}})])])}),[],!1,null,null,null);a.default=l.exports}}]);